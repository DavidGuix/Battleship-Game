import pandas as pd
import numpy as np
import random
class tablero_ataque():
    barcos_esloras = [1,1,1,1,2,2,2,3,3,4]  #lista con los barcos y sus esloras para recorrerla con un for y colocarlos en el tablero
    longitud = ['A','B','C','D','E','F','G','H','I','J']
    latitud = [0 ,1 ,2, 3, 4, 5, 6, 7 , 8 , 9]
    mapa_ataque_j = pd.DataFrame(np.full((10,10), '.'), index=longitud, columns=latitud)
    mapa_ataque_m = pd.DataFrame(np.full((10,10), '.'), index=longitud, columns=latitud)
    mapa_defensa_j = pd.DataFrame(np.full((10,10), '.'), index=longitud, columns=latitud)
    mapa_defensa_m = pd.DataFrame(np.full((10,10), '.'), index=longitud, columns=latitud)
    coordenada_ataque = []
    def colocar_barco_j(self):
        self.mapa_defensa_j.iloc[1:5,0]= 'P'
        self.mapa_defensa_j.iloc[0:3,2]= 'A'
        self.mapa_defensa_j.iloc[5:8,2]= 'A'
        self.mapa_defensa_j.iloc[0,5:7]= 'D'
        self.mapa_defensa_j.iloc[2,5:7]= 'D'
        self.mapa_defensa_j.iloc[4,5:7]= 'D'
        self.mapa_defensa_j.iloc[8,3]= 'F'
        self.mapa_defensa_j.iloc[8,5]= 'F'
        self.mapa_defensa_j.iloc[8,7]= 'F'
        self.mapa_defensa_j.iloc[8,9]= 'F'
        print('\nMapa jugador \n', self.mapa_defensa_j)


    def colocar_barco_m(self):
       
        #BUCLE A TRAVES DE LAS ESLORAS D
        for barco_len in tablero_ataque.barcos_esloras:

            #HACEMOS UN BUCLE PARA COMPROBAR QUE EL BARCO CABE Y NO PISA A OTRO BARCO. SI SE CUMPLEN, COLOCAMOS
            while True:
                direccion, fila, columna = random.choice(['horizontal', 'vertical']), random.randint(0,9), random.randint(0,9)

                #LLAMAMOS A LA FUNCION BARCO_CABE PARA COMPROBAR SI CABE EL BARCO
                if self.barco_cabe(barco_len, fila, columna, direccion): 

                    #LLAMAMOS A LA FUNCION BARCO_SUPERPUESTO
                    if self.barco_superpuesto(fila, columna, direccion, barco_len) == False: 

                        #COLOCAMOS BARCO, CADA POSICION SE REPRESENTA CON LA INICIAL DE CADA TIPO DE BARCO:
                        #F:FRAGATA, D:DESTRUCTOR, A:ACORAZADO, P:PORTAAVIONES
                        if direccion == 'horizontal':
                            for i in range(columna, columna + barco_len):
                                if barco_len == 1:
                                    self.mapa_defensa_m[fila][i] = 'F'
                                elif barco_len == 2:
                                    self.mapa_defensa_m[fila][i] = 'D'
                                elif barco_len == 3:
                                    self.mapa_defensa_m[fila][i] = 'A'
                                elif barco_len == 4:
                                    self.mapa_defensa_m[fila][i] = 'P'
                        else:
                            for i in range(fila, fila + barco_len):
                                if barco_len == 1:
                                    self.mapa_defensa_m[i][columna] = 'F'
                                elif barco_len == 2:
                                    self.mapa_defensa_m[i][columna] = 'D'
                                elif barco_len == 3:
                                    self.mapa_defensa_m[i][columna] = 'A'
                                elif barco_len == 4:
                                    self.mapa_defensa_m[i][columna] = 'P'
                        break

        
    def barco_cabe(self, barco_len, fila, columna, direccion):
    #FUNCION PARA COMPROBAR SI EL BARCO CABE 
    #VARIABLES: LAS ESLORAS DE LOS BARCOS, LA FILA, LA COLUMNA Y LA DIRECCION
        if direccion == 'horizontal':
            if columna + barco_len >= 10:
                return False
            else:
                return True
        else:
            if fila + barco_len >= 10:
                return False
            else:
                return True


    def barco_superpuesto(self, fila, columna, direccion, barco_len):
    #FUNCION PARA COMPROBAR SI YA HAY ALGUN BARCO EN ESA POSICION
    #VARIABLES DE ENTRADA: TABLERO QUE QUEREMOS USAR, FILA SELECCIONADA, COLUMNA, DIRECCION Y LONGITUD DEL BARCO
        if direccion == 'horizontal':
            for i in range(columna, columna + barco_len):
                if self.mapa_defensa_m[fila][i] == 'F' or self.mapa_defensa_m[fila][i] == 'D' or self.mapa_defensa_m[fila][i] == 'A' or self.mapa_defensa_m[fila][i] == 'P':
                    return True
        else:
            for i in range(fila, fila + barco_len):
                if self.mapa_defensa_m[i][columna] == 'F' or self.mapa_defensa_m[i][columna] == 'D' or self.mapa_defensa_m[i][columna] == 'A' or self.mapa_defensa_m[i][columna] == 'P':
                    return True
        return False
        
    
    def ataque_jugador(self):
        print('Empieza el juego')
    # while para que el disparo caiga en el tablero,pide coordenadas hasta que introduzca una válida
        while True:
            x = input('Dispara a columna: ').upper()
            if x in self.longitud:
                break
            else:
                print('Coordenada incorrecta')
        while True:
            y = input('Dispara a fila: ')
            try:
                y = int(y)
                if y in self.latitud:
                    break
                else:
                    print('Coordenada incorrecta')
            except:
                print('Valor introducido incorrecto')
        self.coordenada_ataque.append(x)
        self.coordenada_ataque.append(y)
        print('Has atacado la coordenada', x,y)
    def ataque_maquina(self):
        print('Turno de la máquina')
    # while para que el disparo caiga en el tablero,pide coordenadas hasta que introduzca una válida
        long = self.longitud
        lat = self.latitud
        x = random.choice(long)
        y = random.choice(lat)
        self.coordenada_ataque.append(x)
        self.coordenada_ataque.append(y)
        print('La máquina ha atacado la coordenada', x,y)
    def comprobar_ataque_j(self):
        if self.mapa_ataque_j.loc[self.coordenada_ataque[1],self.coordenada_ataque[0]] == '~' or self.mapa_ataque_j.loc[self.coordenada_ataque[1],self.coordenada_ataque[0]] == 'X':
            print('Ya has disparado a esa casilla')
        elif self.mapa_defensa_m.loc[self.coordenada_ataque[1],self.coordenada_ataque[0]] == '.':
            print('Agua')
            self.mapa_ataque_j.loc[self.coordenada_ataque[1],self.coordenada_ataque[0]] = '~'
        else:
            print('Tocado')
            self.mapa_ataque_j.loc[self.coordenada_ataque[1],self.coordenada_ataque[0]] = 'X'
        print('Tablero jugador','\n',self.mapa_ataque_j,'\n')
    def comprobar_ataque_m(self):
        if self.mapa_ataque_m.loc[self.coordenada_ataque[1],self.coordenada_ataque[0]] == '~' or self.mapa_ataque_m.loc[self.coordenada_ataque[1],self.coordenada_ataque[0]] == 'X':
            pass
        elif self.mapa_defensa_j.loc[self.coordenada_ataque[1],self.coordenada_ataque[0]] == '.':
            print('Agua')
            self.mapa_ataque_m.loc[self.coordenada_ataque[1],self.coordenada_ataque[0]] = '~'
        else:
            print('Tocado')
            self.mapa_ataque_m.loc[self.coordenada_ataque[1],self.coordenada_ataque[0]] = 'X'
        print('Tablero máquina','\n',self.mapa_ataque_m,'\n')
jugador = tablero_ataque()
maquina = tablero_ataque()
maquina.colocar_barco_m()
print('\nMapa máquina \n', maquina.mapa_defensa_m)
jugador.colocar_barco_j()
print('\nMapa Ataque Jugador\n', jugador.mapa_ataque_j)
print('\nMapa Ataque Maquina\n', maquina.mapa_ataque_m)
def disparo_jugador():
    while True:
        jugador.coordenada_ataque = []
        jugador.ataque_jugador()
        print(jugador.coordenada_ataque)
        jugador.comprobar_ataque_j()
        print(jugador.coordenada_ataque)
        print(jugador.mapa_ataque_j.loc[jugador.coordenada_ataque[1],jugador.coordenada_ataque[0]])
        if jugador.mapa_ataque_j.loc[jugador.coordenada_ataque[1],jugador.coordenada_ataque[0]] == '~':
            break
        else:
            print('Te vuelve a tocar')
    print('Turno de la máquina')
def disparo_maquina():
    while True:
        maquina.coordenada_ataque = []
        maquina.ataque_maquina()
        print(maquina.coordenada_ataque)
        maquina.comprobar_ataque_m()
        print(maquina.coordenada_ataque)
        print(maquina.mapa_ataque_m.loc[maquina.coordenada_ataque[1],maquina.coordenada_ataque[0]])
        if maquina.mapa_ataque_m.loc[maquina.coordenada_ataque[1],maquina.coordenada_ataque[0]] == '~':
            break
        else:
            print('Te vuelve a tocar')
    print('Turno del jugador')
# juego
disparo_jugador()
disparo_maquina()
